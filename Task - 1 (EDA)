**CO-TECH INTERNSHIP – TASK 1** 
**EXPLORATION EXPLORATORY DATA ANALYSIS (EDA)**
  
**TASK - 1 [Start with a dataset of your choice and perform EDA using libraries like pandas, numpy, and matplotlib or seaborn. Explore the data's characteristics, distributions, correlations, and outliers. Visualize your findings with histograms, scatter plots, and heatmaps to gain insights into the data]**

**1. PROJECT OVERVIEW** 

- This project performs Exploratory Data Analysis (EDA) on the Iris Dataset to gain insights into the relationships between different features of the iris flowers. The primary objective is to explore the dataset's characteristics, visualize distributions, correlations, and outliers, and analyze the relationships between numerical and categorical variables. The Iris Dataset contains measurements of sepal length, sepal width, petal length, and petal width for three species of iris flowers. This analysis helps in understanding the dataset before applying machine learning algorithms.

**2. Dataset Description**

- The **Iris Dataset** contains 150 observations of iris flowers, with 50 samples from each of the three species:
- Iris setosa, Iris versicolor, and Iris virginica. The dataset includes the following attributes:
•	*Sepal Length (cm)*: Continuous variable representing the length of the sepal.
•	*Sepal Width* (cm): Continuous variable representing the width of the sepal.
•	*Petal Length* (cm): Continuous variable representing the length of the petal.
•	*Petal Width* (cm): Continuous variable representing the width of the petal.
•	*Species*: Categorical variable representing the species of the iris flower, with values: 'Iris setosa', 'Iris versicolor', and 'Iris virginica'.
**STEP 1 - SET UP THE ENVIROMENT**

**Libraries Used**

	1. pandas: For data manipulation and analysis (loading, cleaning, transforming data).
	2. numpy: For numerical operations and handling arrays
  3. matplotlib: For creating static, animated, and interactive visualizations.
	4. seaborn: For statistical data visualization, including plots like heatmaps, pair plots, and boxplots. 

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
import pandas as pd  # Import pandas

**1. Data Loading:**

   Loaded the Iris dataset into a pandas DataFrame from a CSV file.

df = pd.read_csv('iris_dataset.csv')

**Step - 2 : Data Exploration:**

**a) df.info -  Provides information on the dataset, such as the number of entries, column names, data types, and null values.**

df.info()
iris_df = pd.read_csv('C:/Users/User/Downloads/iris_dataset.csv')
iris_df = pd.read_csv('iris_dataset.csv')

b) df.dtypes -  Provides Lists the data types for each column
iris_df.dtypes


The `data.head()` method allows you to quickly see the structure of the dataset. For this task, we're assuming `petal length` as the feature and `petal width` as the target variable.
print(iris_df.head())

iris_df.columns
iris_df.describe()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris

# Load the Iris dataset
iris = load_iris()
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_df['species'] = iris.target
iris_df['species'] = iris_df['species'].map({0: 'setosa', 1: 'versicolor', 2: 'virginica'})

# Set the figure size
plt.figure(figsize=(10, 8))

# Create histograms for each feature
for i, feature in enumerate(iris_df.columns[:-1]):
    plt.subplot(2, 2, i + 1)
    sns.histplot(iris_df[feature], kde=True, bins=10, color='green', alpha=0.4)
    plt.title(f'Histogram of {feature}')
    plt.xlabel(feature)
    plt.ylabel('Frequency')

# Adjust layout and show the plot
plt.tight_layout()
plt.show()

sns.pairplot(iris_df, hue='species', markers=["o", "s", "D"])#marker is defined the shape
plt.show()

# again load the data for boxplot
iris = load_iris()
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_df['species'] = iris.target
iris_df['species'] = iris_df['species'].map({0: 'setosa', 1: 'versicolor', 2: 'virginica'})


plt.figure(figsize=(6, 4))
sns.boxplot(x='species', y='sepal length (cm)', data=iris_df,color='yellow',)
plt.title("Boxplot of Sepal Length by Species")
plt.show()


plt.figure(figsize=(6, 4))
sns.boxplot(x='species', y='sepal width (cm)', data=iris_df,color='green')
plt.title("Boxplot of Sepal Width by Species")
plt.show()


plt.figure(figsize=(6, 4))
sns.boxplot(x='species', y='petal length (cm)', data=iris_df,color='red')
plt.title("Boxplot of Petal Length by Species")
plt.show()


plt.figure(figsize=(6, 4))
sns.boxplot(x='species', y='petal width (cm)', data=iris_df,color='orange')
plt.title("Boxplot of Petal Width by Species")
plt.show()

Iris_data=iris_df[['petal length (cm)','petal width (cm)','sepal length (cm)','sepal width (cm)']]
Iris_data

corr_matrix = Iris_data.corr()
print(corr_matrix)

plt.figure(figsize=(10, 6))
sns.heatmap(corr_matrix, annot=True, cmap='PiYG')
plt.title("Heatmap of Correlation Matrix")
plt.show()

# Scatter plot for Sepal length vs Sepal width
plt.figure(figsize=(7, 5))
colors = {'setosa': 'red', 'versicolor': 'green', 'virginica': 'blue'}
for species, color in colors.items():
    subset = iris_df[iris_df['species'] == species]
    plt.scatter(subset['sepal length (cm)'], subset['sepal width (cm)'], label=species, color=color)
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.title('Sepal Length vs Sepal Width')
plt.legend()
plt.show()

# Scatter plot for Petal length vs Petal width
plt.figure(figsize=(8, 5))
for species, color in colors.items():
    subset = iris_df[iris_df['species'] == species]
    plt.scatter(subset['petal length (cm)'], subset['petal width (cm)'], label=species, color=color)
plt.xlabel('Petal Length (cm)')
plt.ylabel('Petal Width (cm)')
plt.title('Petal Length vs Petal Width')
plt.legend()
plt.show()

plt.figure(figsize=(8,6))
sns.violinplot(x='species', y='sepal length (cm)', data=iris_df)
plt.title("Violin Plot of Sepal Length by Species")
plt.show()

plt.figure(figsize=(8, 6))
sns.violinplot(x='species', y='sepal width (cm)', data=iris_df)
plt.title("Violin Plot of Sepal Width by Species")
plt.show()

plt.figure(figsize=(8, 5))
sns.violinplot(x='species', y='petal length (cm)', data=iris_df)
plt.title("Violin Plot of Petal Length by Species")
plt.show()

sns.countplot(x='species', data=df)
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(5,5))
sns.boxplot(x='species', y='sepal length (cm)', data=df)
plt.xticks(rotation=45)
plt.show()


